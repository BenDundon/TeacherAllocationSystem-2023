<script>
  //Color each row and handle the opening and clsoing of the items
  const coll = document.getElementsByClassName("table-static");
  var i;

  for (i = 0; i < coll.length; i++) {
    try{
      if(i % 2 === 0){
          coll[i].classList.add("table-bg-primary");
          coll[i].nextElementSibling.classList.add("table-bg-primary");
        } else {
          coll[i].classList.add("table-bg-secondary");
          coll[i].nextElementSibling.classList.add("table-bg-secondary");
        }

      coll[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var arrow = this.firstChild.nextElementSibling.firstChild;
        arrow.classList.toggle("arrow-down");

        var content = this.nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
          arrow.classList.toggle("arrow-normal");
        } else {
          content.style.display = "block";
        }
      });
    } catch(err){
    continue;
    }
  }

  function expandAll(){
    for (i = 0; i < coll.length; i++) {
        coll[i].classList.toggle("active");
        var arrow = coll[i].firstChild.nextElementSibling.firstChild;
        arrow.classList.toggle("arrow-down");
        var content = coll[i].nextElementSibling;
        if (content.style.display === "block") {
          content.style.display = "none";
          arrow.classList.toggle("arrow-normal");
        } else {
          content.style.display = "block";
        }
    }
  }

  /*
  Handles automatic formatting of the table rows and columns.
  hcell class is used to calculate the number of columns required. 
  All calculations use hcell count so include the class on all heading cells.

tcell (Table Cell) class is used to get every cell including headings so every cell will need tcell class.
  */

  try {
  //A simple way to call max method on an array
  Array.prototype.max = function() {
    return Math.max.apply(null, this);
  };

  //This is used to define the number of columns in the table.
  const columnCount = Array.from(document.querySelectorAll('.hcell')).length;
    //A 1D array of all the elements widths that have class tcell
  const colWidthsFlat = [];
  const cells = Array.from(document.querySelectorAll(".tcell"));
  cells.forEach(e =>{
    colWidthsFlat.push(e.clientWidth);
  })

  const fullWidth = document.querySelector('.table-static').clientWidth;

  //Define a "matrix" aka an 2D array
  let rowMatrix = [];

  //chunk the flat element widths array into smaller arrays with same size as number of columns. Shape ()
  const chunkSize = columnCount;
  for (let i = 0; i < colWidthsFlat.length; i += chunkSize) {
    const chunk = colWidthsFlat.slice(i, i + chunkSize);
    rowMatrix.push(chunk);
  }

  //Transpose the matrix
  colMatrix = rowMatrix[0].map((_, colIndex) => rowMatrix.map(row => row[colIndex]));

  //get the max width for each row in the matrix which corresponds to a column in the table
  maxWidths = []
  colMatrix.forEach(array => {
    maxWidths.push(array.max());
  });

  //calculate the unused space leftover and how much space to add to each column except the first (chevron)
  const unusedWidth = fullWidth - (maxWidths.reduce((partialSum, a) => partialSum + a, 0));
  extraSpace = (unusedWidth / (columnCount-1)-6);

  //Iterate over the elements and give them the correct width according to the max widths
  for (let i = 0; i < cells.length; i+=columnCount) {
    for (let j = 0; j < columnCount; j++) {
      if(j == 0){
        cells[i+j].style.width = (maxWidths[j] + 6) + "px";
      } else {
        cells[i+j].style.width = (maxWidths[j] + extraSpace) + "px";
      }
    }
  }

} catch (error) {
  console.log("No Data");
}

</script>